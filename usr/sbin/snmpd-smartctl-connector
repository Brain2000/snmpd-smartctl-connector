#!/bin/bash -u

[[ -r /usr/lib/snmpd-connector-lib.sh ]] && source /usr/lib/snmpd-connector-lib.sh
[[ ! -r /usr/lib/snmpd-connector-lib.sh ]] && echo "Unable to find /usr/lib/snmpd-connector-lib.sh" && exit 1

function send_index
{
	# If the index is in range...
	if (( ${RINDEX} <= ${#DEVICES[@]} )); then
		# Send the OID and the index number.
		send_integer ${OID} ${RINDEX}
	else
		# Send none.
		echo "NONE"
	fi
}

# Function to send device info - called: send_device_info OID DEVICE "Info String"
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#	$3 - The STRING to search for
#
function send_device_info
{
	local DEVFNAME VALUE
	
	# Make the device info filename 
	DEVFNAME=${2##\/}
	DEVFNAME=${CACHEDIR}/${DEVFNAME//\//_}_info
	
	# Find the entry in above file
	VALUE=$(grep "${3}" < ${DEVFNAME})
	VALUE=${VALUE#${3}}
	send_string ${1} "${VALUE}"
}

# Function to send device health - called: send_device_hlth OID DEVICE
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#
function send_device_hlth
{
	local DEVFNAME VALUES
	
	# Make the device info filename 
	DEVFNAME=${2##\/}
	DEVFNAME=${CACHEDIR}/${DEVFNAME//\//_}_state
	
	# Find the entry in above file
	VALUES=($(grep "result:" < ${DEVFNAME}))
	[[ "${VALUES[5]}" == "PASSED" ]] && send_boolean ${1} 1 || send_boolean ${1} 2  
}

# Function to send device attribute - called: send_device_attr OID DEVICE "Attribute String" R[aw]|L[ife]
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#	$3 - The STRING to search for
#	$4 - R to send RAW value, L to send LIFETIME value
#
function send_device_attr
{
	local DEVFNAME VALUES
	
	# Make the device info filename 
	DEVFNAME=${2##\/}
	DEVFNAME=${CACHEDIR}/${DEVFNAME//\//_}_attr
	
	# Find the entry in above file
	VALUES=($(grep "${3}" < ${DEVFNAME}))
	case ${4} in
		"R")
		send_gauge ${1} ${VALUES[9]}
		;;
		
		"L")
		send_gauge ${1} $((${VALUES[3]##0} - ${VALUES[5]##0}))
		;;
		
		*)
		send_gauge ${1} -1		
		;;	
	esac
}

# Init local vars
CMDNAME=$(basename ${0})
CONFIG="/etc/snmpd-smartctl-connector"

# Read the config file if we can
[[ -r ${CONFIG} ]] && source ${CONFIG} || die "Unable to read configuration file [${CONFIG}]"

# Check for config values.
[[ -z ${DEVICES} ]] && die "No DEVICES configured in ${CONFIG}"
[[ -z ${CACHEDIR} ]] && die "No CACHEDIR configured in ${CONFIG}"
[[ ! -d ${CACHEDIR} ]] && die "Cache directory [${CACHEDIR}] is not a directory"
[[ ! -w ${CACHEDIR} ]] && die "Cache directory [${CACHEDIR}] is not writable by $(whoami)"
[[ -z SMARTCMD ]] && die "No SMARTCMD configured in ${CONFIG}"
[[ -z SNMP_TRANSLATE ]] && die "No SNMP_TRANSLATE command configured in ${CONFIG}"

# Get base OID
BASE_MIB="SMARTCTL-MIB::smartCtlTable"
BASE_OID="$(${SNMP_TRANSLATE} -On ${BASE_MIB}).1."
(( $? != 0 )) && die "Unable to resolve base OID from ${BASE_MIB}"

# Declare the function table.
FTABLE[1]="send_index"											# It is an index request.
FTABLE[2]="send_string %o %d" 									# It is for the mapped device path.
FTABLE[3]="send_device_info %o %d 'Model Family:'" 				# It is for the device model-family.
FTABLE[4]="send_device_info %o %d 'Device Model:'"				# It is for the device device-model.
FTABLE[5]="send_device_info %o %d 'Serial Number:'" 			# It is for the device serial number.
FTABLE[6]="send_device_info %o %d 'User Capacity:'" 			# It is for the device user capacity.
FTABLE[7]="send_device_info %o %d 'ATA Version is:'"			# It is for the device ATA version.
FTABLE[8]="send_device_hlth %o %d"								# It is for the overall SMART health state.
FTABLE[9]="send_device_attr %o %d 'Temperature_Celsius' R" 		# It is for the device temperature.
FTABLE[10]="send_device_attr %o %d 'Reallocated_Sector_Ct' R" 	# It is for the Reallocated Sector Count of this device.
FTABLE[11]="send_device_attr %o %d 'Current_Pending_Sector' R"	# It is for the Current Pending Sector count of this device.
FTABLE[12]="send_device_attr %o %d 'Offline_Uncorrectable' R" 	# It is for the Off-line Uncorrectable count of this device.
FTABLE[13]="send_device_attr %o %d 'UDMA_CRC_Error_Count' R" 	# It is for the UDMA CRC Error count of this device.
FTABLE[14]="send_device_attr %o %d 'Read_Error_Rate' L" 		# It is for the Read Error Rate (lifetime) of this device.
FTABLE[15]="send_device_attr %o %d 'Seek_Error_Rate' L" 		# It is for the Seek Error Rate (lifetime) of this device.
FTABLE[16]="send_device_attr %o %d 'Hardware_ECC_Recovered' L" 	# It is for the Hardware ECC recovered (lifetime) of this device.

# Define the function to perform string replacement
#
#	@param	$1 - The starting string
#	@param	$2 - The R[equest]TYPE
#	@param	$3 - The R[equest]INDEX
#	@return	$4 - The resulting string
#
# 	%o does not require handling
#
function do_string_replace
{
	local TEMP="${1}"
	local AINDEX=$((${3} - 1))

	# Replace %d with the device path		
	TEMP="${TEMP/\%d/${DEVICES[${AINDEX}]}}"
	
	eval $4="\"${TEMP}\""
}

# Start the loop
the_loop

